This tool is where you register your data sources, entity types, features and attributes.  There is a specific 
json message format for each of these.  Perform a list or a get of each of these to see the json format for it.     

Lets consider you are loading a csv file that contains customer records from your data warehouse.
- The data source is where the file came from - in this case your data warehouse.  
- The entity type denotes what kind of entity each record contains - in this case customers.
- The attributes are what fields are in the file - customer_id, customer_since_date, last_name, etc.
- Some attributes are assigned to features that can help us resolve the entities across data sources such as a customer in one file that is also a customer in another file.

Notes on data_source and entity_types: 
- Reporting is by data_source.  For instance if you wanted to match customers from one database with customers from 
  another database, give each each a different data source code, but they could both be the a customer entity_type.
- Some people like to have entity type be person or organization and just use data source to denote customers vs
  vendors, employees or bad guys.   The choice is yours.
- However, the easiest thing to do is to just make data_source and entity_type the same thing.  In fact, if you don't
  specify entity_type we generally default it to the data_source code.
- Entity types are grouped into entity classes.  Keep all the people and company entity types in the Actor class.
  You can create new classes for other kinds of entities like: ships, cars, asteroids! 

Notes on features and attributes:
- You rarely need to add either! You map the fields in your data source to the attributes we ship with that help us 
  resolve entities both within and across data sources. 
- Other fields that you may want to load as part of your entities such as dates and statuses and amounts do not have
  to be registered as attributes.
- If you do add a feature, you must add a corresponding attribute for it.  See the examples below ...

Examples:
1. To add a new kind of identifier to be used for matching ...
   addFeature {"feature": "MYID", "behavior": "F1", "comparison": "EXACT_COMP", "elementList": [{"compared": "Yes", "element": "ID_NUM"}]}
   addAttribute {"attribute": "MYID_NUMBER", "class": "IDENTIFIER", "feature": "MYID", "element": "ID_NUM", "required": "Yes"}

2. To add a new kind of grouping to be used for matching ...
   addFeature {"feature": "MYGROUP", "behavior": "FF", "comparison": "EXACT_COMP", "elementList": [{"compared": "Yes", "element": "CODE"}]}
   addAttribute {"attribute": "MYGROUP_CODE", "class": "IDENTIFIER", "feature": "MYGROUP", "element": "CODE", "required": "Yes"}

-- End of G2Config.readme --